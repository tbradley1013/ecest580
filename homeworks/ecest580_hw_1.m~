%% ECES T580 Homework 1 - Tyler Bradley
clc;close all;clear;
%% Question 1
% a) 
% Find the protein sequence of the hypothetical protein AF1226 precursor of Archaeoglobus
% fulgidus. What is the sequence of amino acids (in single letter representation) from
% positions 141-147?
af_1226 = getgenpept('O29042.1');

seq = af_1226.Sequence;

seq_sub = seq(141:147);

% b)
% How many nucleotide sequences can give rise to an arbitrary amino acid sequence (hint:
% revgeneticcode)? Write a function that returns the possible sequences. The input to
% the function should be a string (amino acid sequence) and the output should be the
% potential nucleotide sequences.

% See the function rev_seq at the bottom of the script

% c)
% Using the Matlab function from part b), calculate the number of sequences that could
% give rise to the 7 amino acid sequence found in part a).
sub_seq_code = rev_seq(seq_sub);
length(sub_seq_code)


% d)
% Create a Matlab function nt2aa cgbiased.m that will take an amino acid sequence as
% the input and will choose the corresponding codons with the highest CG content. Note:
% If there is more than one sequence that satisfies this condition, pick one at random.
% What is the nucleotide sequence that could give rise to the 7 amino acid sequence
% found in part a).

% see function rev_seq_gc
harvard_gc_sec = rev_seq_gc(seq_sub);


%% Question 4

% a)
% Obtain two highly similar E. Coli bacterial genomes NC 002655 and NC 002695. Is it
% possible to take the global alignment of them with Matlab (show code and results)?
% BLAST them and show results.
ecoli1 = getgenbank("NC_002655");
ecoli2 = getgenbank("NC_002695");

ecoli1_contig = 'AE005174.2';
ecoli2_contig = 'BA000007.3';

ecoli1 = getgenbank(ecoli1_contig);
ecoli2 = 


function output = rev_seq(seq)
revcode = revgeneticcode();

seq_len = length(seq);
possible_seqs = [""];
for i = 1:seq_len
    prot = seq(i);
    
    prot_seq = revcode.(upper(prot));
    
    [x, y] = meshgrid(possible_seqs, prot_seq);
    pairs = [x(:) y(:)];
    
    temp_out = repelem("a", length(pairs));
    for j = 1:length(pairs)
      temp_out(j) = pairs(j, 1) + pairs(j, 2);
    end
    possible_seqs = temp_out;
end
output = possible_seqs;
end


function output = rev_seq_gc(seq)
revcode = revgeneticcode();

seq_len = length(seq);
output_seq = "";

for i = 1:seq_len
    prot = seq(i);
    
    prot_seqs = revcode.(upper(prot));
    gc_scores = repelem(0, length(prot_seqs));
    for j = 1:length(prot_seqs)
        current_seq = char(prot_seqs(j));
        gc_count = 0; 
        for k = 1:3
            if current_seq(k) == "G"
              gc_count = gc_count + 1;
            elseif current_seq(k) == "C"
              gc_count = gc_count + 1; 
            else 
              gc_count = gc_count + 0;
            end
        end
        gc_scores(j) = gc_count;
        
    end
    
    high_gcs = find(gc_scores == max(gc_scores));
    
    if length(high_gcs) > 1
        idx = datasample(high_gcs, 1);
    else
        idx = 1;
    end
    
    final_choice = prot_seqs(idx);
     
    output_seq = output_seq + char(final_choice);
end
output = output_seq;
end